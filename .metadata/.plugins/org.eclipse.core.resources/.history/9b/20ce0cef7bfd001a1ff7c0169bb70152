package com.esisa.compiler.parser;

/*
 * Q1 Grammaire
 * 
 * A	-> for ( B ) C
 * B	-> I O R
 * I	-> id = N; | ;
 * O	-> id oprel N; | ;
 * R	-> id++ | id--
 * N	-> id | nb
 * C	-> { L } | ;
 * L	-> A L | eps
 */
public class FORParser extends Parser {

	public FORParser() {
		getScanner().addReservedWordList("for");
	}

	//A	-> for ( B ) C
	public boolean axiom() {
		if (next("for")) {
			if (next("(")) {
				if (B()) {
					if (next(")")) {
						return C();
					}					
				}
			}
		}
		return false;
	}
	
	//B	-> I O R
	private boolean B() {
		if (I()) {
			if (O()) {
				return R();
			}
		}
		return false;
	}
	
	//R	-> id++ | id--
	private boolean R() {
		// TODO Auto-generated method stub
		return false;
	}

	//O	-> id oprel N; | ;
	private boolean O() {
		if (next("Identificateur")) {
			if (next("Opérateur Relationnel")) {
				if (N()) {
					return next(";");
				}
			}
		}
		return next(";");
	}

	//I	-> id = N; | ;
	private boolean I() {
		if (next("Identificateur")) {
			if (next("=")) {
				if (N()) {
					return next(";");
				}
			}
		}
		return next(";");
	}

	private boolean N() {
		// TODO Auto-generated method stub
		return false;
	}

	private boolean C() {
		// TODO Auto-generated method stub
		return false;
	}

	

}
